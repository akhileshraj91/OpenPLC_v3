char md5[] = "c4eb41d2091205a3dc5fdd2b806bbe67";
/*
 * This file is part of OpenPLC Runtime
 *
 * Copyright (C) 2023 Autonomy, GP Orcullo
 * Based on the work by GP Orcullo on Beremiz for uC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; If not, see <http://www.gnu.org/licenses/>.
 *
 */

#include <stdbool.h>

#include "iec_types_all.h"
#include "POUS.h"

#define SAME_ENDIANNESS      0
#define REVERSE_ENDIANNESS   1

uint8_t endianness;


extern MAIN RES0__INSTANCE0;

static const struct {
    void *ptr;
    __IEC_types_enum type;
} debug_vars[] = {
    {&(RES0__INSTANCE0.FLOW_CONTROL0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.FLOW_K), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.FLOW_TI), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.FLOW_TD), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.PRODUCT_FLOW), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.PRODUCT_FLOW_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.CYCLE_TIME), TIME_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.POS_UPDATE_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.CURR_POS_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.NEW_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.CURR_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.FLOW_SET_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.FLOW_SET_IN), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL0.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL0.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL0.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL0.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL0.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL0.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL0.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL0.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL1.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL1.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL1.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL1.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL1.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL1.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL1.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL1.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL1.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL1.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.FLOW_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.FLOW_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.POS_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.POS_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL2.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL2.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL2.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL2.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL2.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL2.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL2.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL2.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL2.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_REAL2.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_UINT0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_UINT0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_UINT0.REAL_IN), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_UINT0.UINT_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_UINT0._TMP_DIV1_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_UINT0._TMP_MUL4_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0.SCALE_TO_UINT0._TMP_REAL_TO_UINT6_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0._TMP_SUB59_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0._TMP_MUL60_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0._TMP_ADD58_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.FLOW_CONTROL0._TMP_LIMIT40_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.FIRST_RUN), BOOL_ENUM},
    {&(RES0__INSTANCE0.FLOW_SET), UINT_ENUM},
    {&(RES0__INSTANCE0.A_SETPOINT), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.OVERRIDE_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.A_IN_PURGE_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.A_IN_PURGE), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.A_SETPOINT_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.A_SETPOINT), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.CURR_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.VALVE_POS_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.POS_UPDATE_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.VALVE_POS_NOMINAL), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.NEW_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.COMPOSITION_K), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.COMPOSITION_TI), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.CYCLE_TIME), TIME_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL3.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL3.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL3.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL3.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL3.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL3.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL3.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL3.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL3.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL3.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL2.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL2.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL2.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL2.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL2.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL2.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL2.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL2.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL2.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL2.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_UINT0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_UINT0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_UINT0.REAL_IN), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_UINT0.UINT_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_UINT0._TMP_DIV1_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_UINT0._TMP_MUL4_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_UINT0._TMP_REAL_TO_UINT6_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.COMP_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.COMP_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.POS_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.POS_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL0.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL0.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL0.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL0.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL0.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL0.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL0.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0.SCALE_TO_REAL0.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0._TMP_SUB45_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0._TMP_MUL46_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0._TMP_ADD42_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.COMPOSITION_CONTROL0._TMP_LIMIT44_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.F1_VALVE_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.F1_FLOW), UINT_ENUM},
    {&(RES0__INSTANCE0.F2_VALVE_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.F2_FLOW), UINT_ENUM},
    {&(RES0__INSTANCE0.PURGE_VALVE_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.PURGE_FLOW), UINT_ENUM},
    {&(RES0__INSTANCE0.PRODUCT_VALVE_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.PRODUCT_FLOW), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL), UINT_ENUM},
    {&(RES0__INSTANCE0.A_IN_PURGE), UINT_ENUM},
    {&(RES0__INSTANCE0.B_IN_PURGE), UINT_ENUM},
    {&(RES0__INSTANCE0.C_IN_PURGE), UINT_ENUM},
    {&(RES0__INSTANCE0.F1_VALVE_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.F2_VALVE_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.PURGE_VALVE_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.PRODUCT_VALVE_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.PRODUCT_VALVE_SAFE), UINT_ENUM},
    {&(RES0__INSTANCE0.PURGE_VALVE_SAFE), UINT_ENUM},
    {&(RES0__INSTANCE0.F1_VALVE_SAFE), UINT_ENUM},
    {&(RES0__INSTANCE0.F2_VALVE_SAFE), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.PRESSURE_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.PRESSURE), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.PRESSURE_SP_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.PRESSURE_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.CURR_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.VALVE_POS_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.POS_UPDATE_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.VALVE_POS_NOMINAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.VALVE_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.PRESSURE_K), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.PRESSURE_TI), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.CYCLE_TIME), TIME_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL5.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL5.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL5.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL5.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL5.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL5.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL5.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL5.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL5.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL5.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL4.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL4.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL4.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL4.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL4.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL4.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL4.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL4.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL4.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL4.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_UINT0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_UINT0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_UINT0.REAL_IN), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_UINT0.UINT_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_UINT0._TMP_DIV1_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_UINT0._TMP_MUL4_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_UINT0._TMP_REAL_TO_UINT6_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.PRESSURE_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.PRESSURE_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.POS_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.POS_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL0.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL0.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL0.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL0.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL0.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL0.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL0.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0.SCALE_TO_REAL0.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0._TMP_SUB53_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0._TMP_LIMIT55_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0._TMP_SUB57_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_CONTROL0._TMP_MUL60_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.HMI_PRESSURE), INT_ENUM},
    {&(RES0__INSTANCE0.HMI_LEVEL), INT_ENUM},
    {&(RES0__INSTANCE0.HMI_F1_VALVE_POS), INT_ENUM},
    {&(RES0__INSTANCE0.HMI_F1_FLOW), INT_ENUM},
    {&(RES0__INSTANCE0.HMI_F2_VALVE_POS), INT_ENUM},
    {&(RES0__INSTANCE0.HMI_F2_FLOW), INT_ENUM},
    {&(RES0__INSTANCE0.HMI_PURGE_VALVE_POS), INT_ENUM},
    {&(RES0__INSTANCE0.HMI_PURGE_FLOW), INT_ENUM},
    {&(RES0__INSTANCE0.HMI_PRODUCT_VALVE_POS), INT_ENUM},
    {&(RES0__INSTANCE0.HMI_PRODUCT_FLOW), INT_ENUM},
    {&(RES0__INSTANCE0.SCAN_COUNT), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.PRESSURE_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.PRESSURE), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.CURR_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.CURR_SP_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.PRODUCT_SP_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SP_UPDATE), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.PRODUCT_SP_NOMINL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.PRODUCT_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.OVERRIDE_SP_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.OVERRIDE_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.OVERRIDE_K), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.OVERRIDE_TI), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.CYCLE_TIME), TIME_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL7.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL7.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL7.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL7.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL7.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL7.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL7.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL7.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL7.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL7.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.PRESSURE_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.PRESSURE_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.FLOW_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.FLOW_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL0.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL0.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL0.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL0.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL0.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL0.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL0.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0.SCALE_TO_REAL0.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0._TMP_SUB86_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0._TMP_MUL87_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0._TMP_MAX84_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0._TMP_ADD85_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0._TMP_LIMIT67_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0._TMP_DIV73_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0._TMP_MUL75_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.PRESSURE_OVERRIDE0._TMP_REAL_TO_UINT79_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.LIQUID_LEVEL), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.LEVEL_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.CURR_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.NEW_POS), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.CYCLE_TIME), TIME_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.LEVEL_K), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.LEVEL_TI), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL0.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL0.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL0.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL0.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL0.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL0.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL0.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL0.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.LEVEL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.LEVEL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.POS_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.POS_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.LEVEL_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.POS_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.POS_UPDATE_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SP_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL1.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL1.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL1.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL1.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL1.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL1.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL1.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL1.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL1.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL1.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL2.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL2.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL2.RAW_INPUT_VALUE), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL2.SCALED_REAL), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL2.REAL_MAX), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL2.REAL_MIN), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL2.RAW_MAX), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL2.RAW_MIN), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL2.RATE), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_REAL2.OFFSET), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_UINT0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_UINT0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_UINT0.REAL_IN), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_UINT0.UINT_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_UINT0._TMP_DIV1_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_UINT0._TMP_MUL4_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0.SCALE_TO_UINT0._TMP_REAL_TO_UINT6_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0._TMP_SUB32_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0._TMP_MUL33_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0._TMP_SUB30_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.LEVEL_CONTROL0._TMP_LIMIT25_OUT), REAL_ENUM},
    {&(RES0__INSTANCE0.RUN_BIT), BOOL_ENUM},
    {&(RES0__INSTANCE0.ATTACK), BOOL_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.EN), BOOL_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.FLOW_SP_C), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.A_SP_C), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.PRESS_SP_C), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.OVER_SP_C), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.LEVEL_SP_C), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.FLOW_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.A_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.PRESS_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.OVER_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0.LEVEL_SP), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0._TMP_MOVE3_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0._TMP_MOVE7_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0._TMP_MOVE11_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0._TMP_MOVE15_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0.INITIALIZE_SP0._TMP_MOVE19_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE99_ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE99_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE4_ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE4_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE5_ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE5_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE7_ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE7_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE13_ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE13_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE20_ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE20_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE19_ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE19_OUT), UINT_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE25_ENO), BOOL_ENUM},
    {&(RES0__INSTANCE0._TMP_MOVE25_OUT), UINT_ENUM},
};

#define VAR_COUNT               355

uint16_t get_var_count(void)
{
    return VAR_COUNT;
}

size_t get_var_size(size_t idx)
{
    if (idx >= VAR_COUNT)
    {
        return 0;
    }
    switch (debug_vars[idx].type) {
    case TIME_ENUM:
        return sizeof(TIME);
    case UINT_ENUM:
        return sizeof(UINT);
    case BOOL_ENUM:
        return sizeof(BOOL);
    case REAL_ENUM:
        return sizeof(REAL);
    case INT_ENUM:
        return sizeof(INT);
    default:
        return 0;
    }
}

void *get_var_addr(size_t idx)
{
    void *ptr = debug_vars[idx].ptr;

    switch (debug_vars[idx].type) {
    case TIME_ENUM:
        return (void *)&((__IEC_TIME_t *) ptr)->value;
    case UINT_ENUM:
        return (void *)&((__IEC_UINT_t *) ptr)->value;
    case BOOL_ENUM:
        return (void *)&((__IEC_BOOL_t *) ptr)->value;
    case REAL_ENUM:
        return (void *)&((__IEC_REAL_t *) ptr)->value;
    case INT_ENUM:
        return (void *)&((__IEC_INT_t *) ptr)->value;
    default:
        return 0;
    }
}

void force_var(size_t idx, bool forced, void *val)
{
    void *ptr = debug_vars[idx].ptr;

    if (forced) {
        size_t var_size = get_var_size(idx);
        switch (debug_vars[idx].type) {
        case TIME_ENUM: {
            memcpy(&((__IEC_TIME_t *) ptr)->value, val, var_size);
            //((__IEC_TIME_t *) ptr)->value = *((TIME *) val);
            ((__IEC_TIME_t *) ptr)->flags |= __IEC_FORCE_FLAG;
            break;
        }
        case UINT_ENUM: {
            memcpy(&((__IEC_UINT_t *) ptr)->value, val, var_size);
            //((__IEC_UINT_t *) ptr)->value = *((UINT *) val);
            ((__IEC_UINT_t *) ptr)->flags |= __IEC_FORCE_FLAG;
            break;
        }
        case BOOL_ENUM: {
            memcpy(&((__IEC_BOOL_t *) ptr)->value, val, var_size);
            //((__IEC_BOOL_t *) ptr)->value = *((BOOL *) val);
            ((__IEC_BOOL_t *) ptr)->flags |= __IEC_FORCE_FLAG;
            break;
        }
        case REAL_ENUM: {
            memcpy(&((__IEC_REAL_t *) ptr)->value, val, var_size);
            //((__IEC_REAL_t *) ptr)->value = *((REAL *) val);
            ((__IEC_REAL_t *) ptr)->flags |= __IEC_FORCE_FLAG;
            break;
        }
        case INT_ENUM: {
            memcpy(&((__IEC_INT_t *) ptr)->value, val, var_size);
            //((__IEC_INT_t *) ptr)->value = *((INT *) val);
            ((__IEC_INT_t *) ptr)->flags |= __IEC_FORCE_FLAG;
            break;
        }
        default:
            break;
        }
    } else {
        switch (debug_vars[idx].type) {
        case TIME_ENUM:
            ((__IEC_TIME_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;
            break;
        case UINT_ENUM:
            ((__IEC_UINT_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;
            break;
        case BOOL_ENUM:
            ((__IEC_BOOL_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;
            break;
        case REAL_ENUM:
            ((__IEC_REAL_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;
            break;
        case INT_ENUM:
            ((__IEC_INT_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;
            break;
        default:
            break;
        }
    }
}

void swap_bytes(void *ptr, size_t size) 
{
    uint8_t *bytePtr = (uint8_t *)ptr;
    size_t i;
    for (i = 0; i < size / 2; ++i) 
    {
        uint8_t temp = bytePtr[i];
        bytePtr[i] = bytePtr[size - 1 - i];
        bytePtr[size - 1 - i] = temp;
    }
}

void trace_reset(void)
{
    for (size_t i=0; i < VAR_COUNT; i++) 
    {
        force_var(i, false, 0);
    }
}

void set_trace(size_t idx, bool forced, void *val)
{
    if (idx >= 0 && idx < VAR_COUNT) 
    {
        if (endianness == REVERSE_ENDIANNESS)
        {
            // Aaaaarghhhh... Stupid AVR is Big Endian.
            swap_bytes(val, get_var_size(idx));
        }

        force_var(idx, forced, val);
    }
}

void set_endianness(uint8_t value)
{
    if (value == SAME_ENDIANNESS || value == REVERSE_ENDIANNESS)
    {
        endianness = value;
    }
}
